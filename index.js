require('dotenv').config();
const { Client, GatewayIntentBits, Partials } = require('discord.js');
const fs = require('fs');

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.DirectMessages
  ],
  partials: [Partials.Channel]
});

let memory = {
  messages: [],
  dolbaebs: {}
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–º—è—Ç–∏
try {
  if (fs.existsSync('memory.json')) {
    memory = JSON.parse(fs.readFileSync('memory.json', 'utf8'));
  }
} catch (err) {
  console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–º—è—Ç–∏:', err);
}

let messageCount = 0;

client.once('ready', () => {
  console.log(`–ë–æ—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∫–∞–∫ ${client.user.tag}`);
  client.user.setActivity('zxcursed', { type: 2 }); // type 0 = Playing
});

client.on('messageCreate', async (message) => {
  if (message.author.bot) return;

  const content = message.content.trim();
  const guildId = message.guild?.id;

  // === –ö–æ–º–∞–Ω–¥–∞ w.dolbaebday ===
  if (content.toLowerCase() === 'w.dolbaebday' && guildId) {
    const today = new Date().toDateString();

    if (memory.dolbaebs[guildId]?.date === today) {
      return message.reply(`–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–æ–ª–±–∞—ë–± –¥–Ω—è —É–∂–µ –≤—ã–±—Ä–∞–Ω: üéâ <@${memory.dolbaebs[guildId].userId}> üéâ`);
    }

    const members = await message.guild.members.fetch();
    const filtered = members.filter(m => !m.user.bot);
    if (filtered.size === 0) return message.reply('–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.');

    const randomMember = filtered.random();
    memory.dolbaebs[guildId] = { userId: randomMember.id, date: today };
    saveMemory();

    return message.channel.send(`üéâ –î–æ–ª–±–∞—ë–± –¥–Ω—è: <@${randomMember.id}> üéâ`);
  }

  // === –ö–æ–º–∞–Ω–¥–∞ w.ask ===
  if (content.toLowerCase().startsWith('w.ask')) {
    const question = content.slice(5).trim();
    if (!question) return message.reply('–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å. –ü—Ä–∏–º–µ—Ä: `w.ask —Å—Ç–æ–∏—Ç –ª–∏ –ø–∏—Ç—å?`');

    const yesAnswers = [
      '–î–ê', '–∫–æ–Ω–µ—á–Ω–æ', '–•–ê–•–ê–•–ê –î–ê –î–ê –î–ê', '–¥–∞, –æ—á–µ–≤–∏–¥–Ω–æ',
      '–î–ê, –ë–†–ê–¢', '—Å–∞–º –±–æ–≥ –≤–µ–ª–µ–ª', '–±–µ–∑—É—Å–ª–æ–≤–Ω–æ', '–¥–∞–≤–∞–π!'
    ];

    const noAnswers = [
      '–ù–ï–¢', '–ù–ï–¢ –ë–õ–Ø–¢–¨', '–ê–•–ê–•–ê–• –ù–ï–ï–ï–ï–¢', '–Ω–µ—Ç, –¥–æ–ª–±–æ—ë–±',
      '–¥–∞ –Ω—É –Ω–∞—Ö—É–π', '–Ω–∏ –≤ –∫–æ–µ–º —Å–ª—É—á–∞–µ', '–Ω–µ—Ç, –¥–∞–∂–µ –Ω–µ –¥—É–º–∞–π'
    ];

    const isYes = Math.random() < 0.5;
    const finalAnswer = isYes
      ? yesAnswers[Math.floor(Math.random() * yesAnswers.length)]
      : noAnswers[Math.floor(Math.random() * noAnswers.length)];

    return message.reply(`üîÆ ${finalAnswer}`);
  }

  if (content === 'w.zov') {
    try {
      await message.channel.send('üôè‚ù§Ô∏è –ß–∏—Ç–∞–µ–º –º–æ–ª–∏—Ç–≤—É...');
      setTimeout(() => {
        const phrases = [
          'H–ê–® –°–ª–∞–≤–∞ –ë–æ–≥—É üôè‚ù§Ô∏è–°–õ–ê–í–ê –†–û–°–°–ò–ò üôè‚ù§Ô∏è–ê–ù–ì–ï–õ–ê –•–†–ê–ù–ò–¢–ï–õ–Ø –ö–ê–ñ–î–û–ú–£ –ò–ó –í–ê–° üôè‚ù§Ô∏è–ë–û–ñ–ï –•–†–ê–ù–ò –†–û–°–°–ò–Æ üôè‚ù§Ô∏è–°–ü–ê–°–ò–ë–û –í–ê–ú –ù–ê–®–ò –ú–ê–õ–¨–ß–ò–ö–ò üôèüèº‚ù§Ô∏èüá∑üá∫ –ß–¢–û –ü–û–î–î–ï–†–ñ–ò–ú –ù–ê–®–ò–• –°–†–ê–ó–£ –≤–∏–¥–Ω–æ –ù–ê–® –°–õ–û–ù–Ø–†–êüá∑üá∫üá∑üá∫üí™ –°–í–û —Å–ª–∞–≤–∞ —Ç–µ–±–µ –ì–æ—Å–ø–æ–¥–∏üá∑üá∫üá∑üá∫üá∑üá∫üí™üî•üî• –°–í–û –¥–∞ —Ö—Ä–∞–Ω–∏—Ç –¢–ï–ë–Ø –ì–û–°–ü–û–î–¨üî•üí™üí™üá∑üá∫ –ù–ê–® –∂–∏–≤—á–∏–∫ –°–†–ê–ó–£ –≤–∏–¥–Ω–æ –ù–ê–®–ò–• –ø–∞—Ä–Ω–µ–π –∏–∑–¥–∞–ª–µ–∫–∞üá∑üá∫üá∑üá∫üá∑üá∫üá∑üá∫üí™üí™üí™üí™üí™ –°–í–û–∏—Ö –Ω–µ –±—Ä–æ—Å–∞–µ–ºüá∑üá∫üá∑üá∫üá∑üá∫üá∑üá∫üá∑üá∫üá∑üá∫üá∑üá∫üá∑üá∫üá∑üá∫üí™üí™–°–ª–∞–≤–∞ –ë–æ–≥—É –°–í–ûüôè‚ù§Ô∏è–°–õ–ê–í–ê –°–í–ûüôè‚ù§Ô∏è–ê–ù–ì–ï–õ–ê –•–†–ê–ù–ò–¢–ï–õ–Ø –°–í–û –ö–ê–ñ–î–û–ú–£ –ò–ó –í–ê–°üôè‚ù§Ô∏è–ë–û–ñ–ï –•–†–ê–ù–ò –°–í–ûüôè‚ù§Ô∏è–°–ü–ê–°–ò–ë–û –í–ê–ú –ù–ê–®–ò –°–í–ûüôèüèº‚ù§Ô∏èüá∑üá∫ –•–†–û–ù–ò –°–í–û‚úäüá∑üá∫üíØ–°–ü–ê–°–ò–ë–û –í–ê–ú –ù–ê–®–ò –ú–ê–õ–¨–ß–ò–ö–ò üôèüèº‚ù§Ô∏èüá∑üá∫ –ß–¢–û –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–ï –°–í–û',
          '–°–ª–∞–≤–∞ –ë–æ–≥—É Züôè‚ù§Ô∏è–°–õ–ê–í–ê Züôè‚ù§Ô∏è–ê–ù–ì–ï–õ–ê –•–†–ê–ù–ò–¢–ï–õ–Ø Z –ö–ê–ñ–î–û–ú–£ –ò–ó –í–ê–°üôè‚ù§Ô∏è–ë–û–ñ–ï –•–†–ê–ù–ò Züôè‚ù§Ô∏è–°–ü–ê–°–ò–ë–û –í–ê–ú –ù–ê–®–ò –°–í–ûüôèüèº‚ù§Ô∏èüá∑üá∫ –•–†–ê–ù–ò ZOV‚úäüá∑üá∫üíØ–°–ü–ê–°–ò–ë–û –ù–ê–®–ò–ú –ë–û–ô–¶–ê–ú–°–ª–∞–≤–∞ –ë–æ–≥—É Züôè‚ù§Ô∏è–°–õ–ê–í–ê Züôè‚ù§Ô∏è–ê–ù–ì–ï–õ–ê –•–†–ê–ù–ò–¢–ï',
          '–°–ª–∞V–∞ –ë–æ–≥—É Züôè‚ù§Ô∏è–°V–ê–í–ê Züôè‚ù§Ô∏è–ê–ù–ì–ï–õ–ê –•–†–ê–ù–ò–¢–ï–õ–Ø Z –ö–ê–ñ–î–û–ú–£ –ò–ó –í–ê–°üôè‚ù§Ô∏è–ë–û–ñ–ï –•–†–ê–ù–ò Züôè‚ù§Ô∏è–°–ü–ê–°–ò–ë–û V–ê–ú –ù–ê–®–ò –°–í–ûüôèüèº‚ù§Ô∏èüá∑üá∫ –•–†–ê–ù–ò Z–°–ª–∞V–∞ –ë–æ–≥—É Züôè‚ù§Ô∏è',
          '–°–ª–∞–≤–∞ –ë–æ–≥—É –ó–ê–ü–†–ï–¢üôè‚ù§Ô∏èüá∑üá∫–°–õ–ê–í–ê –ó–ê–ü–†–ï–¢–£üôè‚ù§Ô∏èüá∑üá∫–ê–ù–ì–ï–õ–ê –•–†–ê–ù–ò–¢–ï–õ–Ø –ó–ê–ü–†–ï–¢–ê –ö–ê–ñ–î–û–ú–£ –ò–ó –í–ê–°üôè‚ù§Ô∏èüá∑üá∫–ë–û–ñ–ï –•–†–ê–ù–ò –ó–ê–ü–†–ï–¢üôè‚ù§Ô∏èüá∑üá∫–°–ü–ê–°–ò–ë–û –í–ê–ú –ù–ê–®–ò –ó–ê–ü–†–ï–¢–´üôè‚ù§Ô∏è–•–†–ê–ù–ò –ó–ê–ü–†–ï–¢‚úäüá∑üá∫üíØ',
        ];
        const random = phrases[Math.floor(Math.random() * phrases.length)];
        message.channel.send(random);
      }, 1500); // –∑–∞–¥–µ—Ä–∂–∫–∞ 1.5 —Å–µ–∫—É–Ω–¥—ã
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ w.zov:', error);
    }
  }

  if (content === 'w.delete') {
    try {
      const msg = await message.channel.send('üî¥ –£–¥–∞–ª—è—é –°–í–û..\n[‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë] 0%');
  
      let progress = 0;
      const interval = setInterval(async () => {
        progress += 10;
        const bar = '‚ñà'.repeat(progress / 10) + '‚ñë'.repeat(10 - progress / 10);
        await msg.edit(`üî¥ –£–¥–∞–ª–µ–Ω–∏–µ...\n[${bar}] ${progress}%`);
  
        if (progress >= 90) {
          clearInterval(interval);
          setTimeout(() => {
            msg.edit(`‚ùå –û—à–∏–±–∫–∞: –°–í–û –ù–ï –ú–û–ñ–ï–¢ –ë–´–¢–¨ –£–î–ê–õ–ï–ù–û. ZOV –ù–ê–í–°–ï–ì–î–ê ZOVüá∑üá∫ ZOV üá∑üá∫ZOV üá∑üá∫ZOVüá∑üá∫\nüíÄ`);
          }, 1000);
        }
      }, 300);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –≤ w.delete:', err);
    }
  }

    // === –ö–æ–º–∞–Ω–¥–∞ w.help ===
    if (content.toLowerCase() === 'w.help') {
      const helpMessage = `
  üìñ **–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞**:
  
  ü§° \`w.dolbaebday\` ‚Äî –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –¥–æ–ª–±–∞—ë–±–∞ –¥–Ω—è.
  
  üé± \`w.ask [–≤–æ–ø—Ä–æ—Å]\` ‚Äî –æ—Ç–≤–µ—á–∞–µ—Ç –¥–∞ –∏–ª–∏ –Ω–µ—Ç, —Å —ç–º–æ—Ü–∏—è–º–∏.
  
  üîä \`w.zov\` ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞—Ç—Ä–∏–æ—Ç–∏—á–µ—Å–∫—É—é –º–æ–ª–∏—Ç–≤—É.
  
  üí£ \`w.delete\` ‚Äî *—Ç—Ä–æ–ª–ª—å-–∫–æ–º–∞–Ω–¥–∞* ¬´—É–¥–∞–ª–µ–Ω–∏—è¬ª –°–í–û.
  
  üì¢ @–±–æ—Ç ‚Äî –ø—Ä–∏ –ø–∏–Ω–≥–µ –æ—Ç–≤–µ—á–∞–µ—Ç –¥–æ–ª–±–∞—ë–±—Å–∫–∏–º–∏ —Ñ—Ä–∞–∑–∞–º–∏.
  
  üß† –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è ‚Äî –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ –±–æ—Ç –≥–æ–≤–æ—Ä–∏—Ç –±—Ä–µ–¥.
  
  üïäÔ∏è –°–æ–æ–±—â–µ–Ω–∏—è –≤ –õ–° —Ç–æ–∂–µ –∑–∞–ø–æ–º–∏–Ω–∞—é—Ç—Å—è –∏ –ø—Ä–æ–≤–æ—Ü–∏—Ä—É—é—Ç –æ—Ç–≤–µ—Ç.
  
  ‚ùì \`w.help\` ‚Äî —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.
      `;
      return message.reply(helpMessage);
    }
  
  

  // === –û—Ç–≤–µ—Ç –Ω–∞ –ø–∏–Ω–≥ (@–±–æ—Ç) ===
  if (message.mentions.has(client.user)) {
    const reply = generateStupidMessage();
    if (reply) message.reply(reply);
  }

  // === –°–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ===
  if (content && message.guild) {
    memory.messages.push(content);
    messageCount++;
    if (messageCount >= 10) {
      messageCount = 0;
      const reply = generateStupidMessage();
      if (reply) message.channel.send(reply);
    }
    saveMemory();
  }

  // === –û—Ç–≤–µ—Ç –≤ –õ–° ===
  if (!message.guild) {
    memory.messages.push(content);
    const reply = generateStupidMessage();
    if (reply) message.reply(reply);
    saveMemory();
  }
});

function generateStupidMessage() {
  if (memory.messages.length === 0) return null;
  const shuffled = [...memory.messages].sort(() => 0.5 - Math.random());
  const selected = shuffled.slice(0, 5);
  return selected.join(' ').slice(0, 2000);
}

function saveMemory() {
  try {
    fs.writeFileSync('memory.json', JSON.stringify(memory, null, 2));
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏:', err);
  }
}

client.login(process.env.DISCORD_TOKEN);
